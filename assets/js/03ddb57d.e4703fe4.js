"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[5939],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=l,f=m["".concat(o,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(f,s(s({ref:t},d),{},{components:n})):a.createElement(f,s({ref:t},d))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:l,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5664:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));const r={},s="Day 22 : \u6a21\u578b\u512a\u5316 - \u77e5\u8b58\u84b8\u993e Knowledge Distillation",i={unversionedId:"2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling/Day 22",id:"2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling/Day 22",title:"Day 22 : \u6a21\u578b\u512a\u5316 - \u77e5\u8b58\u84b8\u993e Knowledge Distillation",description:"\u7b2c 13 \u5c46\u9435\u4eba\u8cfd\u934a\u6210",source:"@site/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling/Day 22.md",sourceDirName:"2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling",slug:"/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling/Day 22",permalink:"/my-site/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling/Day 22",draft:!1,editUrl:"https://github.com/willismax/my-site/blob/main/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling/Day 22.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Day 21 : \u6a21\u578b\u512a\u5316 - \u526a\u679d Pruning",permalink:"/my-site/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling/Day 21"},next:{title:"Day 23 : \u6a21\u578b\u5206\u6790 TensorFlow Model Analysis (TFMA)",permalink:"/my-site/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u8ac7\u5be6\u8e10-\u5efa\u6a21 Modeling/Day 23"}},o={},p=[{value:"\u4ec0\u9ebc\u662f\u77e5\u8b58\u84b8\u993e Knowledge Distillation",id:"\u4ec0\u9ebc\u662f\u77e5\u8b58\u84b8\u993e-knowledge-distillation",level:2},{value:"\u5be6\u4f5c\u77e5\u8b58\u84b8\u993e Knowledge Distillation",id:"\u5be6\u4f5c\u77e5\u8b58\u84b8\u993e-knowledge-distillation",level:2},{value:"\u6e96\u5099\u8cc7\u6599",id:"\u6e96\u5099\u8cc7\u6599",level:3},{value:"\u5efa\u7acbDistiller\u985e\u5225",id:"\u5efa\u7acbdistiller\u985e\u5225",level:3},{value:"\u5efa\u7acb\u8001\u5e2b\u8207\u5b78\u751f\u6a21\u578b",id:"\u5efa\u7acb\u8001\u5e2b\u8207\u5b78\u751f\u6a21\u578b",level:3},{value:"\u8a13\u7df4\u8001\u5e2b",id:"\u8a13\u7df4\u8001\u5e2b",level:2},{value:"\u900f\u904e\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u5b78\u751f",id:"\u900f\u904e\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u5b78\u751f",level:3},{value:"\u6bd4\u8f03\u6a21\u578b - \u5f9e\u982d\u8a13\u7df4\u5b78\u751f",id:"\u6bd4\u8f03\u6a21\u578b---\u5f9e\u982d\u8a13\u7df4\u5b78\u751f",level:3},{value:"\u6bd4\u8f03\u6a21\u578b\u6e96\u78ba\u7387",id:"\u6bd4\u8f03\u6a21\u578b\u6e96\u78ba\u7387",level:3},{value:"\u5c0f\u7d50",id:"\u5c0f\u7d50",level:2},{value:"\u53c3\u8003",id:"\u53c3\u8003",level:2}],d={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"day-22--\u6a21\u578b\u512a\u5316---\u77e5\u8b58\u84b8\u993e-knowledge-distillation"},"Day 22 : \u6a21\u578b\u512a\u5316 - \u77e5\u8b58\u84b8\u993e Knowledge Distillation"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://ithelp.ithome.com.tw/users/20121130/ironman/4015"},(0,l.kt)("img",{parentName:"a",src:"https://d1dwq032kyr03c.cloudfront.net/images/ironman_sticker/13/ai-and-data.png?sticker",alt:null,title:"\u7b2c 13 \u5c46\u9435\u4eba\u8cfd\u934a\u6210"}),"\u7b2c 13 \u5c46\u9435\u4eba\u8cfd\u934a\u6210"),"\n",(0,l.kt)("a",{parentName:"p",href:"https://ithelp.ithome.com.tw/articles/10268783"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/iThome%E9%90%B5%E4%BA%BA%E8%B3%BD2021-%E5%A8%81%E5%88%A9%E6%96%AF-blue",alt:null}))),(0,l.kt)("h2",{id:"\u4ec0\u9ebc\u662f\u77e5\u8b58\u84b8\u993e-knowledge-distillation"},"\u4ec0\u9ebc\u662f\u77e5\u8b58\u84b8\u993e Knowledge Distillation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'\u77e5\u8b58\u84b8\u993e Knowledge Distillation \u70ba\u6a21\u578b\u58d3\u7e2e\u6280\u8853\uff0c\u5176\u4e2d student \u6a21\u578b\u5f9e\u53ef\u4ee5\u66f4\u8907\u96dc\u7684 teacher \u6a21\u578b\u4e2d "\u5b78\u7fd2" \u3002\u63db\u8a00\u4e4b\uff0c\u5982\u679c\u5df2\u7d93\u900f\u904e\u8907\u96dc\u7684\u7d50\u69cb\u5efa\u69cb\u51fa\u4e0d\u932f\u7684\u6a21\u578b\uff0c\u53ef\u4ee5\u7528\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u51fa\u8f03\u7c21\u6613\u7248\u672c\u7684\u6a21\u578b\uff0c\u6e96\u78ba\u5ea6\u4e0d\u6703\u5dee\u592a\u591a\u3002'),(0,l.kt)("li",{parentName:"ul"},"\u77e5\u8b58\u84b8\u993e\u4e3b\u8981\u904b\u7528\u5728\u5206\u985e\u4efb\u52d9\u4e0a\u3002"),(0,l.kt)("li",{parentName:"ul"},"Colab \u652f\u63f4 ",(0,l.kt)("a",{parentName:"li",href:"https://colab.research.google.com/drive/1R1EQrUEP2Sb5gq-dIf_wbyA5KOhtRBWv"},(0,l.kt)("img",{parentName:"a",src:"https://i.imgur.com/pQnQ4tG.png",alt:null})),"\uff0c\u53c3\u8003",(0,l.kt)("a",{parentName:"li",href:"https://www.tensorflow.org/lite/performance/post_training_quantization"},"Keras\u5b98\u65b9\u7bc4\u4f8b"),"\u4fee\u6539\u800c\u6210\uff0c\u7406\u8ad6\u8acb\u53c3\u898b",(0,l.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/1503.02531"},"\u8ad6\u6587"),"\u3002")),(0,l.kt)("h2",{id:"\u5be6\u4f5c\u77e5\u8b58\u84b8\u993e-knowledge-distillation"},"\u5be6\u4f5c\u77e5\u8b58\u84b8\u993e Knowledge Distillation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u672c\u7bc4\u4f8b\u7686\u4ee5 ",(0,l.kt)("inlineCode",{parentName:"li"},"tf.Kreas"),"\u5be6\u4f5c\uff0c\u904e\u7a0b\u5305\u542b:",(0,l.kt)("ol",{parentName:"li"},(0,l.kt)("li",{parentName:"ol"},"\u81ea\u5b9a\u7fa9\u4e00\u500b",(0,l.kt)("inlineCode",{parentName:"li"},"Distiller"),"\u985e\u5225\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u7528 CNN \u8a13\u7df4 teacher \u6a21\u578b\u3002"),(0,l.kt)("li",{parentName:"ol"},"student \u6a21\u578b\u5411 teacher \u5b78\u7fd2\u3002"),(0,l.kt)("li",{parentName:"ol"},"\u8a13\u7df4\u4e00\u500b\u6c92\u5411\u8001\u5e2b\u5b78\u7684 student_scratch \u6a21\u578b\u9032\u884c\u6bd4\u8f03\u3002")))),(0,l.kt)("h3",{id:"\u6e96\u5099\u8cc7\u6599"},"\u6e96\u5099\u8cc7\u6599"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5ef6\u7e8c\u524d\u7bc7\u63a1\u7528 ",(0,l.kt)("a",{parentName:"li",href:"https://keras.io/api/datasets/mnist/"},"MNIST")," \uff0c\u60a8\u4e5f\u53ef\u4ee5\u6539\u70ba ",(0,l.kt)("a",{parentName:"li",href:"https://keras.io/api/datasets/cifar10/"},"CIFAR-10"),"\u3001 ",(0,l.kt)("a",{parentName:"li",href:"https://www.tensorflow.org/datasets/catalog/cats_vs_dogs"},"cats vs dogs")," \u7b49\u5206\u985e\u4efb\u52d9\u3002")),(0,l.kt)("h3",{id:"\u5efa\u7acbdistiller\u985e\u5225"},"\u5efa\u7acbDistiller\u985e\u5225"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u672c\u7bc7\u4f7f\u7528 Keras \u5b98\u65b9\u7bc4\u4f8b\u5b9a\u7fa9\u7684 ",(0,l.kt)("inlineCode",{parentName:"p"},"Distiller")," \u985e\u5225\u3002")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u8a72\u985e\u5225\u7e7c\u627f\u65bc ",(0,l.kt)("inlineCode",{parentName:"p"},"th.keras.Model"),"\uff0c\u4e26\u6539\u5beb\u4ee5\u4e0b\u65b9\u6cd5:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"compile"),"\uff1a\u9019\u500b\u6a21\u578b\u9700\u8981\u4e00\u4e9b\u984d\u5916\u7684\u53c3\u6578\u4f86\u7de8\u8b6f\uff0c\u6bd4\u5982\u8001\u5e2b\u548c\u5b78\u751f\u7684\u640d\u5931\uff0calpha \u548c temp \u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"train_step"),"\uff1a\u63a7\u5236\u6a21\u578b\u7684\u8a13\u7df4\u65b9\u5f0f\u3002\u9019\u5c07\u662f\u771f\u6b63\u7684\u77e5\u8b58\u84b8\u993e\u908f\u8f2f\u6240\u5728\u3002\u9019\u500b\u65b9\u6cd5\u5c31\u662f\u4f60\u505a\u7684\u6642\u5019\u8abf\u7528\u7684\u65b9\u6cd5model.fit\u3002"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"test_step"),"\uff1a\u63a7\u5236\u6a21\u578b\u7684\u8a55\u4f30\u3002\u9019\u500b\u65b9\u6cd5\u5c31\u662f\u4f60\u505a\u7684\u6642\u5019\u8abf\u7528\u7684\u65b9\u6cd5model.evaluate\u3002")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class Distiller(keras.Model):\n    def __init__(self, student, teacher):\n        super(Distiller, self).__init__()\n        self.teacher = teacher\n        self.student = student\n\n    def compile(\n        self,\n        optimizer,\n        metrics,\n        student_loss_fn,\n        distillation_loss_fn,\n        alpha=0.1,\n        temperature=3,\n        ):\n        """ Configure the distiller.\n        Args:\n            optimizer: Keras optimizer for the student weights.\n            metrics: Keras metrics for evaluation.\n            student_loss_fn: Loss function of difference between student\n                predictions and ground-truth.\n            distillation_loss_fn: Loss function of difference between soft\n                student predictions and soft teacher predictions.\n            alpha: weight to student_loss_fn and 1-alpha to \n                distillation_loss_fn.\n            temperature: Temperature for softening probability \n                distributions.\n                Larger temperature gives softer distributions.\n        """\n        super(Distiller, self).compile(\n            optimizer=optimizer, \n            metrics=metrics\n            )\n        self.student_loss_fn = student_loss_fn\n        self.distillation_loss_fn = distillation_loss_fn\n        self.alpha = alpha\n        self.temperature = temperature\n\n    def train_step(self, data):\n        # Unpack data\n        x, y = data\n\n        # Forward pass of teacher\n        teacher_predictions = self.teacher(x, training=False)\n\n        with tf.GradientTape() as tape:\n            # Forward pass of student\n            student_predictions = self.student(x, training=True)\n\n            # Compute losses\n            student_loss = self.student_loss_fn(y, student_predictions)\n            distillation_loss = self.distillation_loss_fn(\n                tf.nn.softmax(\n                    teacher_predictions / self.temperature, axis=1\n                    ),\n                tf.nn.softmax(\n                    student_predictions / self.temperature, axis=1\n                    )\n                )\n            loss = self.alpha * student_loss + (\n                1 - self.alpha) * distillation_loss\n\n        # Compute gradients\n        trainable_vars = self.student.trainable_variables\n        gradients = tape.gradient(loss, trainable_vars)\n\n        # Update weights\n        self.optimizer.apply_gradients(zip(gradients, trainable_vars))\n\n        # Update the metrics configured in `compile()`.\n        self.compiled_metrics.update_state(y, student_predictions)\n\n        # Return a dict of performance\n        results = {m.name: m.result() for m in self.metrics}\n        results.update(\n            {"student_loss": student_loss, \n             "distillation_loss": distillation_loss}\n        )\n        return results\n\n    def test_step(self, data):\n        # Unpack the data\n        x, y = data\n\n        # Compute predictions\n        y_prediction = self.student(x, training=False)\n\n        # Calculate the loss\n        student_loss = self.student_loss_fn(y, y_prediction)\n\n        # Update the metrics.\n        self.compiled_metrics.update_state(y, y_prediction)\n\n        # Return a dict of performance\n        results = {m.name: m.result() for m in self.metrics}\n        results.update({"student_loss": student_loss})\n        return results\n\n')))),(0,l.kt)("h3",{id:"\u5efa\u7acb\u8001\u5e2b\u8207\u5b78\u751f\u6a21\u578b"},"\u5efa\u7acb\u8001\u5e2b\u8207\u5b78\u751f\u6a21\u578b"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u63d0\u91922\u4ef6\u4e8b\u60c5\uff1a"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"\u6700\u5f8c\u4e00\u5c64\u6c92\u6709\u4f7f\u7528\u6fc0\u52f5\u51fd\u6578 ",(0,l.kt)("inlineCode",{parentName:"li"},"softmax")," \uff0c\u56e0\u70ba\u77e5\u8b58\u84b8\u993e\u9700\u8981\u539f\u59cb\u7684\u6b0a\u91cd\u5206\u4f48\u7279\u5fb5\uff0c\u8acb\u8a18\u5f97\u53bb\u6389\u9019\u5c64\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u901a\u904e dropout \u5c64\u7684\u6b63\u5247\u5316\u5c07\u61c9\u7528\u65bc\u6559\u5e2b\u800c\u4e0d\u662f\u5b78\u751f\u3002\u9019\u662f\u56e0\u70ba\u5b78\u751f\u61c9\u8a72\u80fd\u5920\u901a\u904e\u84b8\u993e\u904e\u7a0b\u5b78\u7fd2\u9019\u7a2e\u6b63\u5247\u5316\u3002"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u53ef\u4ee5\u5c07\u5b78\u751f\u6a21\u578b\u8996\u70ba\u6559\u5e2b\u6a21\u578b\u7684\u7c21\u5316\uff08\u6216\u58d3\u7e2e\uff09\u7248\u672c\u3002"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"def big_model_builder():\n  keras = tf.keras\n  model = keras.Sequential([\n    keras.layers.InputLayer(input_shape=(28, 28)),\n    keras.layers.Reshape(target_shape=(28, 28, 1)),\n    keras.layers.Conv2D(\n        filters=12, kernel_size=(3, 3), activation='relu'),\n    keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    keras.layers.Conv2D(\n        filters=12, kernel_size=(3, 3), activation='relu'),\n    keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(10)\n  ])\n  return model\n\ndef small_model_builder():\n  keras = tf.keras\n  model = keras.Sequential([\n    keras.layers.InputLayer(input_shape=(28, 28)),\n    keras.layers.Reshape(target_shape=(28, 28, 1)),\n    keras.layers.Conv2D(\n        filters=12, kernel_size=(3, 3), activation='relu'),\n    keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(10)\n  ])\n  return model\n\nteacher = big_model_builder()\nstudent = small_model_builder()\nstudent_scratch = small_model_builder()\n\n")))),(0,l.kt)("h2",{id:"\u8a13\u7df4\u8001\u5e2b"},"\u8a13\u7df4\u8001\u5e2b"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u4e00\u5982\u65e2\u5f80\uff0c\u6beb\u7121\u61f8\u5ff5\u7684\u8a13\u7df4\u539f\u59cb\u6a21\u578b/\u8001\u5e2b\u6a21\u578b\u3002"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Train teacher as usual\nteacher.compile(\n    optimizer=keras.optimizers.Adam(),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=[keras.metrics.SparseCategoricalAccuracy()],\n)\nteacher.summary()\n\n# Train and evaluate teacher on data.\nteacher.fit(train_images, train_labels, epochs=2)\n_ , ACCURACY['teacher model'] = teacher.evaluate(test_images, test_labels)\n\n")))),(0,l.kt)("h3",{id:"\u900f\u904e\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u5b78\u751f"},"\u900f\u904e\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u5b78\u751f"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"\u5275\u5efa",(0,l.kt)("inlineCode",{parentName:"p"},"Distiller"),"\u985e\u5225\u7684\u5be6\u4f8b\u4e26\u50b3\u5165\u5b78\u751f\u548c\u6559\u5e2b\u6a21\u578b",(0,l.kt)("inlineCode",{parentName:"p"},"distiller = Distiller(student=student, teacher=teacher)"),"\u3002\u7136\u5f8c\u7528\u5408\u9069\u7684\u53c3\u6578\u7de8\u8b6f\u4e26\u8a13\u7df4\u3002"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Initialize and compile distiller\ndistiller = Distiller(student=student, teacher=teacher)\ndistiller.compile(\n    optimizer=keras.optimizers.Adam(),\n    metrics=[keras.metrics.SparseCategoricalAccuracy()],\n    student_loss_fn=keras.losses.SparseCategoricalCrossentropy(\n        from_logits=True),\n    distillation_loss_fn=keras.losses.KLDivergence(),\n    alpha=0.1,\n    temperature=10,\n)\n\n# Distill teacher to student\ndistiller.fit(\n    train_images, \n    train_labels, \n    epochs=2, \n    shuffle=False\n    )\n\n# Evaluate student on test dataset\nACCURACY['distiller student model'], _ = distiller.evaluate(\n    test_images, test_labels)\n\n\n")))),(0,l.kt)("h3",{id:"\u6bd4\u8f03\u6a21\u578b---\u5f9e\u982d\u8a13\u7df4\u5b78\u751f"},"\u6bd4\u8f03\u6a21\u578b ","-"," \u5f9e\u982d\u8a13\u7df4\u5b78\u751f"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"student_scratch \u662f\u500b\u5b78\u751f\u81ea\u5df1\u8a13\u7df4\uff0c\u672a\u53c3\u8207\u77e5\u8b58\u84b8\u993e\u904e\u7a0b\u7684\u666e\u901a\u6a21\u578b\uff0c\u67b6\u69cb\u8207 student \u76f8\u540c\uff0c\u7528\u4f86\u6bd4\u8f03\u8a13\u7df4\u6210\u679c\u3002"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"# Train student as doen usually\nstudent_scratch.compile(\n    optimizer=keras.optimizers.Adam(),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=[keras.metrics.SparseCategoricalAccuracy()],\n    )\nstudent_scratch.summary()\n\n# Train and evaluate student trained from scratch.\nstudent_scratch.fit(\n    train_images, \n    train_labels, \n    epochs=2, \n    shuffle=False\n    )\n# student_scratch.evaluate(x_test, y_test)\n_, ACCURACY['student from scrath model'] = student_scratch.evaluate(\n    test_images, \n    test_labels\n    )\n\n")))),(0,l.kt)("h3",{id:"\u6bd4\u8f03\u6a21\u578b\u6e96\u78ba\u7387"},"\u6bd4\u8f03\u6a21\u578b\u6e96\u78ba\u7387"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u6700\u7d42\u6a21\u578b\u6e96\u78ba\u7387\u7d04\u70ba:",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-python"},"ACCURACY\n{'teacher model': 0.9822999835014343,\n 'distiller student model': 0.9729999899864197,\n 'student from scrath model': 0.9697999954223633}\n"))),(0,l.kt)("li",{parentName:"ul"},"\u8001\u5e2b\u7684\u6e96\u78ba\u7387\u901a\u5e38\u61c9\u8a72\u6703\u9ad8\u65bc\u5b78\u751f\uff0c\u7562\u7adf\u662f\u50be\u6ce8\u5fc3\u529b\u7684\u6a21\u578b\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u300c\u63a5\u53d7\u77e5\u8b58\u84b8\u993e\u7684\u5b78\u751f\u300d\u8868\u73fe\u901a\u5e38\u6703\u512a\u65bc\u300c\u81ea\u5df1\u5f9e\u982d\u958b\u59cb\u7684\u5b78\u751f\u300d\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u5b78\u751f\u7684\u6a21\u578b\u96d6\u7136\u8f03\u7c21\u6613\uff0c\u77e5\u8b58\u84b8\u993e\u751a\u81f3\u6703\u9752\u51fa\u65bc\u85cd\u52dd\u65bc\u85cd\u7684\u60c5\u6cc1\uff0c\u800c\u4e14\u6a21\u578b\u4e5f\u8f03\u8f15\u91cf\u3002")),(0,l.kt)("h2",{id:"\u5c0f\u7d50"},"\u5c0f\u7d50"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u5728\u9047\u5230\u5de8\u578b\u6a21\u578b(\u5982: GTP-3)\u6642\uff0c\u904b\u7b97\u8cc7\u6e90\u6050\u6015\u4e0d\u5bb9\u8a31\u60a8\u8f15\u6613\u90e8\u7f72\u4e0a\u7dda\uff0c\u6b64\u6642\u63a1\u7528\u77e5\u8b58\u84b8\u993e\uff0c\u8b93\u300c\u5b78\u751f\u300d\u5b78\u7fd2\u300c\u8001\u5e2b\u300d\uff0c\u81f3\u5c11\u6bd4\u5b78\u751f\u81ea\u4e3b\u5b78\u7fd2\u5bb9\u6613\u53d6\u5f97\u8f03\u4f73\u7d50\u679c\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u4e5f\u56e0\u70ba Keras \u5b98\u65b9\u7bc4\u4f8b\u6a21\u578b\u7528 Colab \u8dd1\u8f03\u4e45\uff0c\u6545\u4e5f\u81ea\u5df1\u6539\u5beb\u8f03\u5feb\u6536\u5230\u6210\u679c\u7684\u7248\u672c\u3002"),(0,l.kt)("li",{parentName:"ul"},"\u9023\u7e8c\u8ac7\u81ea\u52d5\u5316\u5efa\u6a21\u8207\u6a21\u578b\u512a\u5316\uff0c\u5e0c\u671b\u80fd\u8b93\u60a8\u5c07\u6a21\u578b\u4e0a\u7dda\u66f4\u6709\u4fe1\u5fc3\uff0c\u7576\u7136\u5982\u4f55\u76e3\u63a7\u8207\u89c0\u5bdf\u6a21\u578b\u4e5f\u76f8\u7576\u91cd\u8981\uff0c\u6211\u5011\u4e0b\u7bc7\u898b\u3002",(0,l.kt)("br",{parentName:"li"}),(0,l.kt)("img",{parentName:"li",src:"https://ithelp.ithome.com.tw/images/emoticon/emoticon41.gif",alt:"/images/emoticon/emoticon41.gif"}))),(0,l.kt)("h2",{id:"\u53c3\u8003"},"\u53c3\u8003"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://keras.io/examples/vision/knowledge_distillation/"},"Keras knowledge_distillation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://chtseng.wordpress.com/2020/05/12/%E7%9F%A5%E8%AD%98%E8%92%B8%E9%A4%BE-knowledgedistillation/"},"\u77e5\u8b58\u84b8\u993e\u4ecb\u7d39"))))}u.isMDXComponent=!0}}]);