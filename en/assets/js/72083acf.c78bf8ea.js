"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[6151],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),c=s,f=d["".concat(o,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(f,l(l({ref:t},u),{},{components:n})):a.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[d]="string"==typeof e?e:s,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5945:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),s=(n(7294),n(3905));const r={jupyter:{jupytext:{text_representation:{extension:".md",format_name:"markdown",format_version:"1.3",jupytext_version:"1.15.1"}},kernelspec:{display_name:"Python 3",name:"python3"}}},l=void 0,i={unversionedId:"2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks/\u77e5\u8b58\u84b8\u993e_\u9435\u4eba\u8cfd\u793a\u7bc4",id:"2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks/\u77e5\u8b58\u84b8\u993e_\u9435\u4eba\u8cfd\u793a\u7bc4",title:"\u77e5\u8b58\u84b8\u993e_\u9435\u4eba\u8cfd\u793a\u7bc4",description:"- \u6b64\u70ba\u9435\u4eba\u8cfd\u7cfb\u5217\u6587\u793a\u7bc4\u6587\u4ef6\uff0c\u53c3\u8003Keras\u5b98\u65b9\u7bc4\u4f8b\u4fee\u6539\u800c\u6210\u3002",source:"@site/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks/22.\u77e5\u8b58\u84b8\u993e_\u9435\u4eba\u8cfd\u793a\u7bc4.md",sourceDirName:"2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks",slug:"/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks/\u77e5\u8b58\u84b8\u993e_\u9435\u4eba\u8cfd\u793a\u7bc4",permalink:"/my-site/en/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks/\u77e5\u8b58\u84b8\u993e_\u9435\u4eba\u8cfd\u793a\u7bc4",draft:!1,editUrl:"https://github.com/willismax/my-site/blob/main/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks/22.\u77e5\u8b58\u84b8\u993e_\u9435\u4eba\u8cfd\u793a\u7bc4.md",tags:[],version:"current",sidebarPosition:22,frontMatter:{jupyter:{jupytext:{text_representation:{extension:".md",format_name:"markdown",format_version:"1.3",jupytext_version:"1.15.1"}},kernelspec:{display_name:"Python 3",name:"python3"}}},sidebar:"tutorialSidebar",previous:{title:"\u6a21\u578b\u512a\u5316_\u526a\u679d_Pruning_",permalink:"/my-site/en/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks/\u6a21\u578b\u512a\u5316_\u526a\u679d_Pruning_"},next:{title:"TensorFlow_Serving_REST_API_\u9435\u4eba\u8cfd\u793a\u7bc4",permalink:"/my-site/en/docs/2021ITHome\u9435\u4eba\u8cfd\u300c\u5f9eAI\u843d\u5730\u8ac7MLOps\u300d/\u5be6\u4f5cNotebooks/TensorFlow_Serving_REST_API_\u9435\u4eba\u8cfd\u793a\u7bc4"}},o={},p=[{value:"\u6e96\u5099\u8cc7\u6599",id:"\u6e96\u5099\u8cc7\u6599",level:2},{value:"\u5efa\u7acbDistiller\u985e\u5225",id:"\u5efa\u7acbdistiller\u985e\u5225",level:2},{value:"\u5efa\u7acb\u8001\u5e2b\u8207\u5b78\u751f\u6a21\u578b",id:"\u5efa\u7acb\u8001\u5e2b\u8207\u5b78\u751f\u6a21\u578b",level:2},{value:"\u8a13\u7df4\u8001\u5e2b",id:"\u8a13\u7df4\u8001\u5e2b",level:2},{value:"\u900f\u904e\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u5b78\u751f",id:"\u900f\u904e\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u5b78\u751f",level:2},{value:"\u6bd4\u8f03\u6a21\u578b - \u5f9e\u982d\u8a13\u7df4\u5b78\u751f",id:"\u6bd4\u8f03\u6a21\u578b---\u5f9e\u982d\u8a13\u7df4\u5b78\u751f",level:2},{value:"\u5c0f\u7d50",id:"\u5c0f\u7d50",level:2},{value:"\u53c3\u8003",id:"\u53c3\u8003",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("a",{href:"https://colab.research.google.com/github/willismax/ML-in-Production-30-days-sharing/blob/main/notebook/22.%E7%9F%A5%E8%AD%98%E8%92%B8%E9%A4%BE_%E9%90%B5%E4%BA%BA%E8%B3%BD%E7%A4%BA%E7%AF%84.ipynb",target:"_parent"},(0,s.kt)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})),(0,s.kt)("h1",{id:"22\u77e5\u8b58\u84b8\u993e-knowledge-distillation"},"22.\u77e5\u8b58\u84b8\u993e Knowledge Distillation"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u6b64\u70ba\u9435\u4eba\u8cfd\u7cfb\u5217\u6587\u793a\u7bc4\u6587\u4ef6\uff0c\u53c3\u8003",(0,s.kt)("a",{parentName:"li",href:"https://www.tensorflow.org/lite/performance/post_training_quantization"},"Keras\u5b98\u65b9\u7bc4\u4f8b"),"\u4fee\u6539\u800c\u6210\u3002")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'\u77e5\u8b58\u84b8\u993e  Knowledge Distillation \u70ba\u6a21\u578b\u58d3\u7e2e\u6280\u8853\uff0c\u5176\u4e2dstudent\u6a21\u578b\u5f9e\u53ef\u4ee5\u66f4\u8907\u96dc\u7684 teacher \u6a21\u578b\u4e2d "\u5b78\u7fd2" \uff0c\u5be6\u4f5c\u904e\u7a0b\u5305\u542b:',(0,s.kt)("ol",{parentName:"li"},(0,s.kt)("li",{parentName:"ol"},"\u81ea\u5b9a\u7fa9\u4e00\u500b",(0,s.kt)("inlineCode",{parentName:"li"},"Distiller"),"\u985e\u5225\u3002"),(0,s.kt)("li",{parentName:"ol"},"\u7528 CNN \u8a13\u7df4 teacher \u6a21\u578b\u3002"),(0,s.kt)("li",{parentName:"ol"},"student \u6a21\u578b\u5411 teacher \u5b78\u7fd2\u3002"),(0,s.kt)("li",{parentName:"ol"},"\u8a13\u7df4\u4e00\u500b\u6c92\u5411\u8001\u5e2b\u5b78\u7684 student_scratch \u6a21\u578b\u9032\u884c\u6bd4\u8f03\u3002")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'id="uQohoKcHAmzj"',id:'"uQohoKcHAmzj"'},"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport numpy as np\nimport os\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'id="9g9Ji_UEuXyS"',id:'"9g9Ji_UEuXyS"'},"ACCURACY = {}\n")),(0,s.kt)("h2",{id:"\u6e96\u5099\u8cc7\u6599"},"\u6e96\u5099\u8cc7\u6599"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u6a21\u578b\u63a1\u7528",(0,s.kt)("inlineCode",{parentName:"li"},"tf.keras.datasets.mnist"),"\uff0c\u7528CNN\u9032\u884c\u5efa\u6a21\u3002")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'colab={"base_uri": "https://localhost:8080/"} id="u6rKXfkpd6lN" outputId="f18c503e-d4e9-4c16-bb42-b0afb4d78dc3"',colab:'{"base_uri":','"https://localhost:8080/"}':!0,id:'"u6rKXfkpd6lN"',outputId:'"f18c503e-d4e9-4c16-bb42-b0afb4d78dc3"'},"# Load MNIST dataset\nmnist = tf.keras.datasets.mnist\n(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n\n# Normalize the input image so that each pixel value is between 0 to 1.\ntrain_images = train_images / 255.0\ntest_images = test_images / 255.0\n")),(0,s.kt)("h2",{id:"\u5efa\u7acbdistiller\u985e\u5225"},"\u5efa\u7acbDistiller\u985e\u5225"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u6b64\u76f4\u63a5\u4f7f\u7528 Keras \u5b98\u65b9\u7bc4\u4f8b\u5b9a\u7fa9\u7684 ",(0,s.kt)("inlineCode",{parentName:"li"},"Distiller")," \u985e\u5225\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u8a72\u985e\u5225\u7e7c\u627f\u65bc ",(0,s.kt)("inlineCode",{parentName:"li"},"th.keras.Model"),"\uff0c\u4e26\u6539\u5beb\u4ee5\u4e0b\u65b9\u6cd5:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"compile"),"\uff1a\u9019\u500b\u6a21\u578b\u9700\u8981\u4e00\u4e9b\u984d\u5916\u7684\u53c3\u6578\u4f86\u7de8\u8b6f\uff0c\u6bd4\u5982\u8001\u5e2b\u548c\u5b78\u751f\u7684\u640d\u5931\uff0calpha \u548c temp \u3002"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"train_step"),"\uff1a\u63a7\u5236\u6a21\u578b\u7684\u8a13\u7df4\u65b9\u5f0f\u3002\u9019\u5c07\u662f\u771f\u6b63\u7684\u77e5\u8b58\u84b8\u993e\u908f\u8f2f\u6240\u5728\u3002\u9019\u500b\u65b9\u6cd5\u5c31\u662f\u4f60\u505a\u7684\u6642\u5019\u8abf\u7528\u7684\u65b9\u6cd5model.fit\u3002"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"test_step"),"\uff1a\u63a7\u5236\u6a21\u578b\u7684\u8a55\u4f30\u3002\u9019\u500b\u65b9\u6cd5\u5c31\u662f\u4f60\u505a\u7684\u6642\u5019\u8abf\u7528\u7684\u65b9\u6cd5model.evaluate\u3002")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'id="ohxEHQkMBJfN"',id:'"ohxEHQkMBJfN"'},'class Distiller(keras.Model):\n    def __init__(self, student, teacher):\n        super(Distiller, self).__init__()\n        self.teacher = teacher\n        self.student = student\n\n    def compile(\n        self,\n        optimizer,\n        metrics,\n        student_loss_fn,\n        distillation_loss_fn,\n        alpha=0.1,\n        temperature=3,\n    ):\n        """ Configure the distiller.\n\n        Args:\n            optimizer: Keras optimizer for the student weights\n            metrics: Keras metrics for evaluation\n            student_loss_fn: Loss function of difference between student\n                predictions and ground-truth\n            distillation_loss_fn: Loss function of difference between soft\n                student predictions and soft teacher predictions\n            alpha: weight to student_loss_fn and 1-alpha to distillation_loss_fn\n            temperature: Temperature for softening probability distributions.\n                Larger temperature gives softer distributions.\n        """\n        super(Distiller, self).compile(optimizer=optimizer, metrics=metrics)\n        self.student_loss_fn = student_loss_fn\n        self.distillation_loss_fn = distillation_loss_fn\n        self.alpha = alpha\n        self.temperature = temperature\n\n    def train_step(self, data):\n        # Unpack data\n        x, y = data\n\n        # Forward pass of teacher\n        teacher_predictions = self.teacher(x, training=False)\n\n        with tf.GradientTape() as tape:\n            # Forward pass of student\n            student_predictions = self.student(x, training=True)\n\n            # Compute losses\n            student_loss = self.student_loss_fn(y, student_predictions)\n            distillation_loss = self.distillation_loss_fn(\n                tf.nn.softmax(teacher_predictions / self.temperature, axis=1),\n                tf.nn.softmax(student_predictions / self.temperature, axis=1),\n            )\n            loss = self.alpha * student_loss + (\n                1 - self.alpha) * distillation_loss\n\n        # Compute gradients\n        trainable_vars = self.student.trainable_variables\n        gradients = tape.gradient(loss, trainable_vars)\n\n        # Update weights\n        self.optimizer.apply_gradients(zip(gradients, trainable_vars))\n\n        # Update the metrics configured in `compile()`.\n        self.compiled_metrics.update_state(y, student_predictions)\n\n        # Return a dict of performance\n        results = {m.name: m.result() for m in self.metrics}\n        results.update(\n            {"student_loss": student_loss, "distillation_loss": distillation_loss}\n        )\n        return results\n\n    def test_step(self, data):\n        # Unpack the data\n        x, y = data\n\n        # Compute predictions\n        y_prediction = self.student(x, training=False)\n\n        # Calculate the loss\n        student_loss = self.student_loss_fn(y, y_prediction)\n\n        # Update the metrics.\n        self.compiled_metrics.update_state(y, y_prediction)\n\n        # Return a dict of performance\n        results = {m.name: m.result() for m in self.metrics}\n        results.update({"student_loss": student_loss})\n        return results\n\n')),(0,s.kt)("h2",{id:"\u5efa\u7acb\u8001\u5e2b\u8207\u5b78\u751f\u6a21\u578b"},"\u5efa\u7acb\u8001\u5e2b\u8207\u5b78\u751f\u6a21\u578b"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u9019\u88e1\u5b9a\u7fa9\u5927\u6a21\u578b\u8207\u5c0f\u6a21\u578b\uff0c\u8001\u5e2b\u4f7f\u7528\u5927\u6a21\u578b\uff0c\u5b78\u751f\u4f7f\u7528\u5c0f\u6a21\u578b\u3002")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u6709\u5169\u500b\u91cd\u8981\u7684\u4e8b\u60c5\u9700\u8981\u6ce8\u610f\uff1a"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"\u6700\u5f8c\u4e00\u5c64\u6c92\u6709\u4f7f\u7528\u6fc0\u52f5\u51fd\u6578 softmax \uff0c\u56e0\u70ba\u77e5\u8b58\u84b8\u993e\u9700\u8981\u539f\u59cb\u6b0a\u91cd\u7279\u5fb5\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u901a\u904e dropout \u5c64\u7684\u6b63\u5247\u5316\u5c07\u61c9\u7528\u65bc\u6559\u5e2b\u800c\u4e0d\u662f\u5b78\u751f\u3002\u9019\u662f\u56e0\u70ba\u5b78\u751f\u61c9\u8a72\u80fd\u5920\u901a\u904e\u84b8\u993e\u904e\u7a0b\u5b78\u7fd2\u9019\u7a2e\u6b63\u5247\u5316\u3002"))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u53ef\u4ee5\u5c07\u5b78\u751f\u6a21\u578b\u8996\u70ba\u6559\u5e2b\u6a21\u578b\u7684\u7c21\u5316\uff08\u6216\u58d3\u7e2e\uff09\u7248\u672c\u3002"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'id="n6i7GamqnMK4"',id:'"n6i7GamqnMK4"'},"def big_model_builder():\n  keras = tf.keras\n\n  model = keras.Sequential([\n    keras.layers.InputLayer(input_shape=(28, 28)),\n    keras.layers.Reshape(target_shape=(28, 28, 1)),\n    keras.layers.Conv2D(\n        filters=12, kernel_size=(3, 3), activation='relu'),\n    keras.layers.MaxPooling2D(\n        pool_size=(2, 2)),\n    keras.layers.Conv2D(\n        filters=12, kernel_size=(3, 3), activation='relu'),\n    keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(10)\n  ])\n\n\n  return model\n\n\ndef small_model_builder():\n  keras = tf.keras\n\n  model = keras.Sequential([\n    keras.layers.InputLayer(input_shape=(28, 28)),\n    keras.layers.Reshape(target_shape=(28, 28, 1)),\n    keras.layers.Conv2D(\n        filters=12, kernel_size=(3, 3), activation='relu'),\n    keras.layers.MaxPooling2D(pool_size=(2, 2)),\n    keras.layers.Flatten(),\n    keras.layers.Dense(10)\n  ])\n\n\n\n  return model\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'id="Sp-K3DZOnzrZ"',id:'"Sp-K3DZOnzrZ"'},"teacher = big_model_builder()\n\nstudent = small_model_builder()\n\nstudent_scratch = small_model_builder()\n")),(0,s.kt)("h2",{id:"\u8a13\u7df4\u8001\u5e2b"},"\u8a13\u7df4\u8001\u5e2b"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'colab={"base_uri": "https://localhost:8080/"} id="GjhPt9YRo3ZM" outputId="b4a2e943-ebdd-4a6b-a52e-98f543373313"',colab:'{"base_uri":','"https://localhost:8080/"}':!0,id:'"GjhPt9YRo3ZM"',outputId:'"b4a2e943-ebdd-4a6b-a52e-98f543373313"'},"# Train teacher as usual\nteacher.compile(\n    optimizer=keras.optimizers.Adam(),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=[keras.metrics.SparseCategoricalAccuracy()],\n)\nteacher.summary()\n\n# Train and evaluate teacher on data.\nteacher.fit(train_images, train_labels, epochs=2)\n_ , ACCURACY['teacher model'] = teacher.evaluate(test_images, test_labels)\n")),(0,s.kt)("h2",{id:"\u900f\u904e\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u5b78\u751f"},"\u900f\u904e\u77e5\u8b58\u84b8\u993e\u8a13\u7df4\u5b78\u751f"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u8981\u57f7\u884c\u77e5\u8b58\u63d0\u7149\u904e\u7a0b\uff0c\u60a8\u5c07\u4f7f\u7528\u60a8\u4e4b\u524dcompline\u7684\u6a21\u578b\u3002")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u70ba\u6b64\uff0c\u9996\u5148\u5275\u5efa",(0,s.kt)("inlineCode",{parentName:"p"},"Distiller"),"\u985e\u5225\u7684\u5be6\u4f8b\u4e26\u50b3\u5165\u5b78\u751f\u548c\u6559\u5e2b\u6a21\u578b",(0,s.kt)("inlineCode",{parentName:"p"},"distiller = Distiller(student=student, teacher=teacher)\n"),"\u3002\u7136\u5f8c\u7528\u5408\u9069\u7684\u53c3\u6578\u7de8\u8b6f\u5b83\u4e26\u8a13\u7df4\u5b83\uff01")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"\u8001\u5e2b\u53ef\u4ee5\u7528\u66f4\u9ad8\u7684epochs\uff0c\u5b78\u751f\u6703\u5411\u8001\u5e2b\u5b78\u7fd2\u3002"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'colab={"base_uri": "https://localhost:8080/"} id="7ukGU3vrBimO" outputId="6c578924-d885-4bf3-f88f-0bf100318f09"',colab:'{"base_uri":','"https://localhost:8080/"}':!0,id:'"7ukGU3vrBimO"',outputId:'"6c578924-d885-4bf3-f88f-0bf100318f09"'},"# Initialize and compile distiller\ndistiller = Distiller(student=student, teacher=teacher)\ndistiller.compile(\n    optimizer=keras.optimizers.Adam(),\n    metrics=[keras.metrics.SparseCategoricalAccuracy()],\n    student_loss_fn=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    distillation_loss_fn=keras.losses.KLDivergence(),\n    alpha=0.1,\n    temperature=10,\n)\n\n# Distill teacher to student\ndistiller.fit(\n    train_images, \n    train_labels, \n    epochs=2, \n    shuffle=False\n    )\n\n# Evaluate student on test dataset\nACCURACY['distiller student model'], _ = distiller.evaluate(test_images, test_labels)\n\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'colab={"base_uri": "https://localhost:8080/"} id="LFx_LT2fGOQR" outputId="9b0512b8-8379-447a-a23f-45843408fcfa"',colab:'{"base_uri":','"https://localhost:8080/"}':!0,id:'"LFx_LT2fGOQR"',outputId:'"9b0512b8-8379-447a-a23f-45843408fcfa"'},"ACCURACY\n")),(0,s.kt)("h2",{id:"\u6bd4\u8f03\u6a21\u578b---\u5f9e\u982d\u8a13\u7df4\u5b78\u751f"},"\u6bd4\u8f03\u6a21\u578b - \u5f9e\u982d\u8a13\u7df4\u5b78\u751f"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'colab={"base_uri": "https://localhost:8080/"} id="zw6VowE-B5zk" outputId="8738ad95-3049-4262-8476-ddbbaddb1f55"',colab:'{"base_uri":','"https://localhost:8080/"}':!0,id:'"zw6VowE-B5zk"',outputId:'"8738ad95-3049-4262-8476-ddbbaddb1f55"'},"# Train student as doen usually\nstudent_scratch.compile(\n    optimizer=keras.optimizers.Adam(),\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    metrics=[keras.metrics.SparseCategoricalAccuracy()],\n)\nstudent_scratch.summary()\n\n# Train and evaluate student trained from scratch.\nstudent_scratch.fit(\n    train_images, \n    train_labels, \n    epochs=2, \n    shuffle=False\n    )\n# student_scratch.evaluate(x_test, y_test)\n_, ACCURACY['student from scrath model'] = student_scratch.evaluate(test_images, test_labels)\n")),(0,s.kt)("h2",{id:"\u5c0f\u7d50"},"\u5c0f\u7d50"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python",metastring:'colab={"base_uri": "https://localhost:8080/"} id="2-muZGt-HARU" outputId="3c6a0a0f-c5b2-4a71-f593-bacc197bf810"',colab:'{"base_uri":','"https://localhost:8080/"}':!0,id:'"2-muZGt-HARU"',outputId:'"3c6a0a0f-c5b2-4a71-f593-bacc197bf810"'},"ACCURACY\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u8001\u5e2b\u7684\u6e96\u78ba\u7387\u61c9\u6703\u9ad8\u65bc\u5b78\u751f\uff0c\u7562\u7adf\u53ef\u4ee5\u63a1\u7528\u5927\u6a21\u578b\u3001\u66f4\u591a\u7684epoch\u7b49\u65b9\u5f0f\u512a\u5316\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u300c\u63a5\u53d7\u77e5\u8b58\u84b8\u993e\u7684\u5b78\u751f\u300d\u8868\u73fe\u901a\u5e38\u6703\u512a\u65bc\u300c\u81ea\u5df1\u5f9e\u982d\u958b\u59cb\u7684\u5b78\u751f\u300d\u3002"),(0,s.kt)("li",{parentName:"ul"},"\u5b78\u751f\u7684\u6a21\u578b\u96d6\u7136\u8f03\u7c21\u6613\uff0c\u77e5\u8b58\u84b8\u993e\u751a\u81f3\u6703\u9752\u51fa\u65bc\u85cd\u52dd\u65bc\u85cd\u3002")),(0,s.kt)("h2",{id:"\u53c3\u8003"},"\u53c3\u8003"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://keras.io/examples/vision/knowledge_distillation/"},"https://keras.io/examples/vision/knowledge_distillation/"))))}m.isMDXComponent=!0}}]);